@using CodeStash.Application.Utilities
@using CodeStash.ViewModels

@model NoteDetailsViewModel
@inject UserHelper UserHelper

@{
    ViewData["Title"] = $"{Model.Note.Title} - CodeStash"; // TODO: Remove redundant - CodeStash from all views
    ViewData["Description"] = !string.IsNullOrEmpty(Model.Note.Description) ? Model.Note.Description : Model.Note.Title; // TODO: Add description and meta tags to all views

    var currentUserId = UserHelper.TryGetUserId();
}

<div class="note-details-container">
    <div class="container">
        <!-- Note Header -->
        <div class="note-header">
            <div class="note-actions">
                @* <button class="action-btn @(Model.IsLiked ? "active" : "")" onclick="toggleLike('@Model.Note.Id')" id="likeBtn">
                    <i class="fas fa-heart"></i>
                    <span id="likeCount">@Model.Stats.Likes</span>
                </button>
                
                <button class="action-btn @(Model.IsBookmarked ? "bookmarked" : "")" onclick="toggleBookmark('@Model.Note.Id')" id="bookmarkBtn">
                    <i class="fas fa-bookmark"></i>
                    <span>@(Model.IsBookmarked ? "Saved" : "Save")</span>
                </button> *@
                
                <button class="action-btn" onclick="shareNote()">
                    <i class="fas fa-share"></i>
                    <span>Share Note</span>
                </button>
                
                @* @if (Model.AuthorId == currentUserId) // TODO: Verify that an author can edit their note
                {
                    <a asp-action="Edit" asp-route-id="@Model.Note.Id" class="action-btn">
                        <i class="fas fa-edit"></i>
                        <span>Edit</span>
                    </a>
                } *@
            </div>

            <h1 class="note-title">@Model.Note.Title</h1>
            
            @if (!string.IsNullOrEmpty(Model.Note.Description))
            {
                <p class="note-description">@Model.Note.Description</p>
            }

            <div class="note-meta">
                <div class="author-info">
                    @if (!string.IsNullOrWhiteSpace(Model.Author.ProfileImageUrl))
                    {
                        <img src="@Model.Author.ProfileImageUrl"
                             alt="@Model.Author.UserName"
                             class="rounded-circle me-2 profile-avatar-navbar"
                             style="width: 48px; height: 48px; object-fit: cover;">
                    }
                    else
                    {
                        <span class="profile-avatar-navbar profile-avatar-emoji-navbar me-2" title="@Model.Author.UserName" aria-label="User" style="width:48px;height:48px;">
                            <i class="fas fa-user" style="font-size:1.7rem;"></i>
                        </span>
                    }
                    <div class="author-details">
                        <h4>@Model.Author.UserName</h4>
                        <a href="/User/@Model.Author.UserName">View Profile</a>
                    </div>
                </div>

                <div class="note-stats">
                    <div class="note-stat">
                        <i class="fas fa-eye"></i>
                        <span>@Model.Stats.Views.ToString("N0") views</span>
                    </div>
                    <div class="note-stat">
                        <i class="fas fa-calendar"></i>
                        <span>@Model.Stats.CreatedAt.ToString("MMM dd, yyyy")</span>
                    </div>
                    @if (Model.Stats.ModifiedAt.HasValue)
                    {
                        <div class="note-stat">
                            <i class="fas fa-edit"></i>
                            <span>Updated @Model.Stats.ModifiedAt.Value.ToString("MMM dd, yyyy")</span>
                        </div>
                    }
                </div>

                <div class="note-tags">
                    @foreach (var tagName in Model.Note.Tags.Select(tag => tag.Name))
                    {
                        <a href="/browse?tag=@tagName" class="note-tag">@tagName</a> // TODO: Implement view to browse notes by tag
                    }
                </div>
            </div>
        </div>

        <!-- Content Grid -->
        <div class="content-grid">
            <!-- Main Content -->
            <div class="main-content" style="padding-top:0;">
                <!-- Note Content -->
                <div class="note-content-card">
                    <div class="note-content" id="noteContent">
                        @Html.Raw(Model.Note.Content)
                    </div>
                </div>

                @* <!-- Comments Section -->
                <div class="comments-section">
                    <div class="comments-header">
                        <h2 class="comments-title">
                            <i class="fas fa-comments"></i>
                            Comments (@Model.Stats.Comments)
                        </h2>
                    </div>

                    @if (Model.Comments.Any())
                    {
                        <div class="comments-list">
                            @foreach (var comment in Model.Comments)
                            {
                                <div class="comment" id="comment-@comment.Id">
                                    <div class="comment-header">
                                        <img src="https://via.placeholder.com/40x40/333/fff?text=@comment.Author.UserName.Substring(0, 1).ToUpper()" 
                                             alt="@comment.Author.UserName" 
                                             class="comment-avatar">
                                        @if (!string.IsNullOrWhiteSpace(Model.Author.ProfileImageUrl))
                                        {
                                            <img src="@Model.Author.ProfileImageUrl"
                                                 alt="@Model.Author.UserName"
                                                 class="rounded-circle me-2 profile-avatar-navbar"
                                                 style="width: 48px; height: 48px; object-fit: cover;">
                                        }
                                        else
                                        {
                                            <span class="profile-avatar-navbar profile-avatar-emoji-navbar me-2" title="@Model.Author.UserName" aria-label="User">
                                                <i class="fas fa-user"></i>
                                            </span>
                                        }
                                        <a href="/User/@comment.Author.UserName" class="comment-author">@comment.Author.UserName</a>
                                        <span class="comment-date" title="@comment.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss UTC")">@comment.CreatedAt.ToString("MMM dd, yyyy 'at' h:mm tt")</span>
                                        @if (comment.IsEdited)
                                        {
                                            <span class="comment-edited">(edited)</span>
                                        }
                                    </div>
                                    
                                    <div class="comment-content">
                                        @comment.Content
                                    </div>
                                    
                                    <div class="comment-actions">
                                        <button class="comment-action @(comment.IsLikedByCurrentUser ? "liked" : "")" 
                                                onclick="toggleCommentLike('@comment.Id')">
                                            <i class="fas fa-heart"></i>
                                            <span>@comment.LikesCount</span>
                                        </button>
                                        <button class="comment-action" onclick="replyToComment('@comment.Id', '@comment.Author.UserName')">
                                            <i class="fas fa-reply"></i>
                                            <span>Reply</span>
                                        </button>
                                    </div>

                                    @if (comment.Replies.Any())
                                    {
                                        <div class="comment-replies">
                                            @foreach (var reply in comment.Replies)
                                            {
                                                <div class="comment" id="comment-@reply.Id">
                                                    <div class="comment-header">
                                                        <img src="https://via.placeholder.com/40x40/333/fff?text=@reply.Author.UserName.Substring(0, 1).ToUpper()" 
                                                             alt="@reply.Author.UserName" 
                                                             class="comment-avatar">
                                                        @if (!string.IsNullOrWhiteSpace(Model.Author.ProfileImageUrl))
                                                        {
                                                            <img src="@Model.Author.ProfileImageUrl"
                                                                 alt="@Model.Author.UserName"
                                                                 class="rounded-circle me-2 profile-avatar-navbar"
                                                                 style="width: 48px; height: 48px; object-fit: cover;">
                                                        }
                                                        else
                                                        {
                                                            <span class="profile-avatar-navbar profile-avatar-emoji-navbar me-2" title="@Model.Author.UserName" aria-label="User">
                                                                <i class="fas fa-user"></i>
                                                            </span>
                                                        }
                                                        <a href="/User/@reply.Author.UserName" class="comment-author">@reply.Author.UserName</a>
                                                        <span class="comment-date" title="@reply.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss UTC")">@reply.CreatedAt.ToString("MMM dd, yyyy 'at' h:mm tt")</span>
                                                    </div>
                                                    
                                                    <div class="comment-content">
                                                        @reply.Content
                                                    </div>
                                                    
                                                    <div class="comment-actions">
                                                        <button class="comment-action @(reply.IsLikedByCurrentUser ? "liked" : "")" 
                                                                onclick="toggleCommentLike('@reply.Id')">
                                                            <i class="fas fa-heart"></i>
                                                            <span>@reply.LikesCount</span>
                                                        </button>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }

                    <!-- Add Comment Form -->
                    <div class="add-comment-form">
                        <form id="commentForm" onsubmit="addComment(event)">
                            <input type="hidden" name="NoteId" value="@Model.Note.Id" />
                            <input type="hidden" name="ParentCommentId" value="" id="parentCommentId" />
                            
                            <div class="comment-form-group">
                                <textarea name="Content" 
                                          class="comment-textarea" 
                                          placeholder="Share your thoughts about this code snippet..."
                                          id="commentContent"
                                          maxlength="1000"></textarea>
                            </div>
                            
                            <div class="comment-form-actions">
                                <div class="comment-help">
                                    <i class="fas fa-info-circle me-1"></i>
                                    Be respectful and constructive in your feedback
                                </div>
                                <button type="submit" class="btn btn-primary" id="submitCommentBtn">
                                    <i class="fas fa-paper-plane"></i>
                                    Post Comment
                                </button>
                            </div>
                        </form>
                    </div>
                </div> *@
            </div>

            <!-- Sidebar -->
            <div class="sidebar">
                <!-- Author's Other Notes -->
                @if (Model.AuthorOtherNotes.Any())
                {
                    <div class="sidebar-card">
                        <h3 class="sidebar-title">
                            <i class="fas fa-user"></i>
                            More by @Model.Author.UserName
                        </h3>
                        
                        @foreach (var note in Model.AuthorOtherNotes)
                        {
                            <a href="/Note/@note.Slug" class="related-note">
                                <h4>@note.Title</h4>
                                <div class="related-note-meta">
                                    <span><i class="fas fa-eye me-1"></i>@note.ViewCount</span>
                                    <span>@note.CreatedAt.ToString("MMM dd")</span>
                                </div>
                                <div class="related-note-tags">
                                    @foreach (var tag in note.Tags.Take(3))
                                    {
                                        <span class="related-note-tag">@tag.Name</span>
                                    }
                                </div>
                            </a>
                        }
                    </div>
                }

                <!-- Related Notes -->
                @if (Model.RelatedNotes.Any())
                {
                    <div class="sidebar-card">
                        <h3 class="sidebar-title">
                            <i class="fas fa-link"></i>
                            Related Notes
                        </h3>
                        
                        @foreach (var note in Model.RelatedNotes)
                        {
                            <a href="/Note/@note.Slug" class="related-note">
                                <h4>@note.Title</h4>
                                <div class="related-note-meta">
                                    <span>by @note.Author?.UserName</span>
                                    <span><i class="fas fa-eye me-1"></i>@note.ViewCount</span>
                                </div>
                                <div class="related-note-tags">
                                    @foreach (var tag in note.Tags.Take(3))
                                    {
                                        <span class="related-note-tag">@tag.Name</span>
                                    }
                                </div>
                            </a>
                        }
                    </div>
                }

                @* <!-- Note Statistics -->
                <div class="sidebar-card">
                    <h3 class="sidebar-title">
                        <i class="fas fa-chart-bar"></i>
                        Statistics
                    </h3>
                    
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1.5rem;">
                        <div style="text-align: center; background: var(--bg-primary); padding: 1rem; border-radius: 6px;">
                            <div style="font-size: 1.5rem; font-weight: 700; color: var(--accent-primary);">@Model.Stats.Views</div>
                            <div style="font-size: 0.85rem; color: var(--text-secondary);">Views</div>
                        </div>
                        <div style="text-align: center; background: var(--bg-primary); padding: 1rem; border-radius: 6px;">
                            <div style="font-size: 1.5rem; font-weight: 700; color: var(--accent-primary);">@Model.Stats.Likes</div>
                            <div style="font-size: 0.85rem; color: var(--text-secondary);">Likes</div>
                        </div>
                        <div style="text-align: center; background: var(--bg-primary); padding: 1rem; border-radius: 6px;">
                            <div style="font-size: 1.5rem; font-weight: 700; color: var(--accent-primary);">@Model.Stats.Comments</div>
                            <div style="font-size: 0.85rem; color: var(--text-secondary);">Comments</div>
                        </div>
                        <div style="text-align: center; background: var(--bg-primary); padding: 1rem; border-radius: 6px;">
                            <div style="font-size: 1.5rem; font-weight: 700; color: var(--accent-primary);">@Model.Stats.Bookmarks</div>
                            <div style="font-size: 0.85rem; color: var(--text-secondary);">Bookmarks</div>
                        </div>
                    </div>
                </div> *@
            </div>
        </div>
    </div>
</div>

<!-- PrismJS JavaScript -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/toolbar/prism-toolbar.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/copy-to-clipboard/prism-copy-to-clipboard.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Configure PrismJS
        Prism.plugins.autoloader.languages_path = 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/';
        
        // Add line numbers to all code blocks
        document.querySelectorAll('pre[class*="language-"]').forEach(pre => {
            pre.classList.add('line-numbers');
        });
        
        // Re-highlight syntax
        Prism.highlightAll();
        
        // Track view (in real implementation, this would be done server-side)
        trackNoteView('@Model.Note.Id');
    });

    async function toggleLike(noteId) {
        try {
            const response = await fetch(`/Notes/LikeNote/${noteId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                }
            });
            
            const result = await response.json();
            
            if (result.success) {
                const likeBtn = document.getElementById('likeBtn');
                const likeCount = document.getElementById('likeCount');
                
                if (result.isLiked) {
                    likeBtn.classList.add('active');
                } else {
                    likeBtn.classList.remove('active');
                }
                
                likeCount.textContent = result.likeCount;
            }
        } catch (error) {
            console.error('Error toggling like:', error);
            showNotification('Failed to update like status', 'error');
        }
    }

    async function toggleBookmark(noteId) {
        try {
            const response = await fetch(`/Notes/BookmarkNote/${noteId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                }
            });
            
            const result = await response.json();
            
            if (result.success) {
                const bookmarkBtn = document.getElementById('bookmarkBtn');
                const bookmarkText = bookmarkBtn.querySelector('span');
                
                if (result.isBookmarked) {
                    bookmarkBtn.classList.add('bookmarked');
                    bookmarkText.textContent = 'Saved';
                } else {
                    bookmarkBtn.classList.remove('bookmarked');
                    bookmarkText.textContent = 'Save';
                }
                
                showNotification(result.isBookmarked ? 'Note bookmarked!' : 'Bookmark removed', 'success');
            }
        } catch (error) {
            console.error('Error toggling bookmark:', error);
            showNotification('Failed to update bookmark status', 'error');
        }
    }

    function shareNote() {
        if (navigator.share) {
            navigator.share({
                title: '@Model.Note.Title',
                text: '@Model.Note.Description',
                url: window.location.href
            }).catch(console.error);
        } else {
            navigator.clipboard.writeText(window.location.href).then(() => {
                showNotification('Link copied to clipboard!', 'success');
            }).catch(() => {
                showNotification('Could not copy link', 'error');
            });
        }
    }

    async function addComment(event) {
        event.preventDefault();
        
        const form = event.target;
        const formData = new FormData(form);
        const submitBtn = document.getElementById('submitCommentBtn');
        const content = document.getElementById('commentContent').value.trim();
        
        if (!content) {
            showNotification('Please enter a comment', 'error');
            return;
        }
        
        // Show loading state
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Posting...';
        
        try {
            const response = await fetch('/Notes/AddComment', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: formData
            });
            
            const result = await response.json();
            
            if (result.success) {
                // Clear form
                form.reset();
                document.getElementById('parentCommentId').value = '';
                
                // Add comment to UI (simplified for demo)
                showNotification('Comment posted successfully!', 'success');
                
                // In real implementation, you would dynamically add the comment to the DOM
                setTimeout(() => location.reload(), 1000);
            } else {
                showNotification(result.message || 'Failed to post comment', 'error');
            }
        } catch (error) {
            console.error('Error posting comment:', error);
            showNotification('Failed to post comment', 'error');
        } finally {
            submitBtn.disabled = false;
            submitBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Post Comment';
        }
    }

    async function toggleCommentLike(commentId) {
        try {
            const response = await fetch(`/Notes/LikeComment/${commentId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                }
            });
            
            const result = await response.json();
            
            if (result.success) {
                const button = document.querySelector(`[onclick="toggleCommentLike('${commentId}')"]`);
                const likeCount = button.querySelector('span');
                
                if (result.isLiked) {
                    button.classList.add('liked');
                } else {
                    button.classList.remove('liked');
                }
                
                likeCount.textContent = result.likeCount;
            }
        } catch (error) {
            console.error('Error toggling comment like:', error);
        }
    }

    function replyToComment(commentId, authorUsername) {
        const commentContent = document.getElementById('commentContent');
        const parentCommentId = document.getElementById('parentCommentId');
        
        parentCommentId.value = commentId;
        commentContent.value = `@@${authorUsername} `;
        commentContent.focus();
        commentContent.setSelectionRange(commentContent.value.length, commentContent.value.length);
        
        // Scroll to comment form
        document.querySelector('.add-comment-form').scrollIntoView({ behavior: 'smooth' });
    }

    function trackNoteView(noteId) {
        // In real implementation, this would track the view
        console.log(`Tracking view for note: ${noteId}`);
    }

    function showNotification(message, type) {
        const notification = document.createElement('div');
        notification.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show position-fixed`;
        notification.style.cssText = 'top: 100px; right: 20px; z-index: 9999; min-width: 300px;';
        notification.innerHTML = `
            ${message}
            <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 5000);
    }
</script>

<!-- Add CSRF token for AJAX requests -->
@Html.AntiForgeryToken()

@section Styles{


    <!-- PrismJS CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/toolbar/prism-toolbar.min.css" rel="stylesheet" />

    <style>
        .note-details-container {
            background: var(--bg-primary);
            min-height: calc(100vh - 76px);
            padding: 2rem 0;
        }

        .note-header {
            background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);
            border: 1px solid var(--border-primary);
            border-radius: 12px;
            padding: 2.5rem;
            margin-bottom: 2rem;
            position: relative;
            overflow: hidden;
        }

            .note-header::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 4px;
                background: linear-gradient(90deg, var(--accent-primary), var(--accent-secondary));
            }

        .note-title {
            color: var(--text-primary);
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
            line-height: 1.2;
        }

        .note-description {
            color: var(--text-secondary);
            font-size: 1.2rem;
            line-height: 1.6;
            margin-bottom: 2rem;
        }

        .note-meta {
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .author-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .author-avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            border: 2px solid var(--accent-primary);
            object-fit: cover;
        }

        .author-details h4 {
            color: var(--text-primary);
            margin: 0;
            font-size: 1.1rem;
            font-weight: 600;
        }

        .author-details a {
            color: var(--accent-primary);
            text-decoration: none;
            font-size: 0.95rem;
        }

            .author-details a:hover {
                text-decoration: underline;
            }

        .note-stats {
            display: flex;
            flex-wrap: wrap;
            gap: 1.5rem;
            color: var(--text-secondary);
            font-size: 0.95rem;
        }

        .note-stat {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

            .note-stat i {
                color: var(--accent-primary);
            }

        .note-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 0.75rem;
        }

        .note-tag {
            background: var(--accent-secondary);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
            text-decoration: none;
            transition: background 0.2s ease;
        }

            .note-tag:hover {
                background: var(--accent-primary);
                color: white;
            }

        .note-actions {
            position: absolute;
            top: 2rem;
            right: 2rem;
            display: flex;
            gap: 1rem;
        }

        .action-btn {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1rem;
            background: var(--bg-primary);
            border: 1px solid var(--border-primary);
            border-radius: 6px;
            color: var(--text-primary);
            text-decoration: none;
            font-size: 0.9rem;
            transition: all 0.2s ease;
            cursor: pointer;
        }

            .action-btn:hover {
                background: var(--accent-primary);
                color: white;
                border-color: var(--accent-primary);
            }

            .action-btn.active {
                background: var(--accent-primary);
                color: white;
                border-color: var(--accent-primary);
            }

            .action-btn.bookmarked {
                background: #ffc107;
                color: #000;
                border-color: #ffc107;
            }

        .content-grid {
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 2rem;
        }

        .note-content-card {
            background: var(--bg-tertiary);
            border: 1px solid var(--border-primary);
            border-radius: 12px;
            overflow: hidden;
        }

        .note-content {
            padding: 2.5rem;
            color: var(--text-primary);
            line-height: 1.7;
            font-size: 1.05rem;
        }

            .note-content h2,
            .note-content h3,
            .note-content h4 {
                color: var(--text-primary);
                margin-top: 2rem;
                margin-bottom: 1rem;
            }

            .note-content h2 {
                font-size: 1.75rem;
                border-bottom: 2px solid var(--accent-primary);
                padding-bottom: 0.5rem;
            }

            .note-content h3 {
                font-size: 1.5rem;
                color: var(--accent-primary);
            }

            .note-content p {
                margin-bottom: 1.5rem;
            }

            .note-content blockquote {
                background: var(--bg-primary);
                border-left: 4px solid var(--accent-primary);
                padding: 1.5rem;
                margin: 2rem 0;
                border-radius: 0 6px 6px 0;
                font-style: italic;
                color: var(--text-secondary);
            }

                .note-content blockquote p:last-child {
                    margin-bottom: 0;
                }

            .note-content code:not([class*="language-"]) {
                background: var(--bg-primary);
                color: var(--accent-primary);
                padding: 0.25rem 0.5rem;
                border-radius: 4px;
                font-family: 'Courier New', monospace;
                font-size: 0.9em;
            }

            /* PrismJS Customizations */
            .note-content pre[class*="language-"] {
                background: var(--bg-primary) !important;
                border: 1px solid var(--border-primary) !important;
                border-radius: 8px !important;
                margin: 2rem 0 !important;
                padding: 0 !important;
                position: relative !important;
                overflow: hidden !important;
            }

                .note-content pre[class*="language-"] code {
                    background: transparent !important;
                    color: var(--text-primary) !important;
                    padding: 2.5rem 1.5rem 1.5rem !important;
                    display: block !important;
                    overflow-x: auto !important;
                }

                /* Language label */
                .note-content pre[class*="language-"]::before {
                    content: attr(class);
                    content: attr(data-language);
                    position: absolute;
                    top: 0.75rem;
                    right: 1rem;
                    background: var(--accent-primary);
                    color: white;
                    padding: 0.25rem 0.75rem;
                    border-radius: 4px;
                    font-size: 0.75rem;
                    font-weight: 600;
                    text-transform: uppercase;
                    z-index: 2;
                }

            .note-content pre[class*="language-javascript"]::before {
                content: "JavaScript";
            }

            .note-content pre[class*="language-typescript"]::before {
                content: "TypeScript";
            }

            .note-content pre[class*="language-python"]::before {
                content: "Python";
            }

            .note-content pre[class*="language-csharp"]::before {
                content: "C#";
            }

            .note-content pre[class*="language-css"]::before {
                content: "CSS";
            }

            .note-content pre[class*="language-html"]::before {
                content: "HTML";
            }

            .note-content pre[class*="language-sql"]::before {
                content: "SQL";
            }

            .note-content pre[class*="language-json"]::before {
                content: "JSON";
            }

            .note-content pre[class*="language-bash"]::before {
                content: "Bash";
            }

        /* Toolbar styles */
        .code-toolbar {
            position: relative;
        }

            .code-toolbar .toolbar {
                left: 1rem;
                opacity: 1 !important;
            }

                .code-toolbar .toolbar .toolbar-item button {
                    background: var(--bg-secondary);
                    border: 1px solid var(--border-primary);
                    color: var(--text-primary);
                    padding: 0.25rem 0.75rem !important;
                    border-radius: 4px;
                    font-size: 0.75rem;
                    cursor: pointer;
                    transition: all 0.2s ease;
                    margin-top: 0.5rem;
                }

                    .code-toolbar .toolbar .toolbar-item button:hover {
                        background: var(--accent-primary);
                        color: white;
                    }

        .sidebar {
            display: flex;
            flex-direction: column;
            gap: 2rem;
        }

        .sidebar-card {
            background: var(--bg-tertiary);
            border: 1px solid var(--border-primary);
            border-radius: 8px;
            padding: 2rem;
        }

        .sidebar-title {
            color: var(--text-primary);
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

            .sidebar-title i {
                color: var(--accent-primary);
            }

        .related-note {
            display: block;
            background: var(--bg-primary);
            border: 1px solid var(--border-primary);
            border-radius: 6px;
            padding: 1.25rem;
            margin-bottom: 1rem;
            text-decoration: none;
            transition: all 0.2s ease;
        }

            .related-note:hover {
                border-color: var(--accent-primary);
            }

            .related-note:last-child {
                margin-bottom: 0;
            }

            .related-note h4 {
                color: var(--text-primary);
                font-size: 1rem;
                font-weight: 600;
                margin-bottom: 0.5rem;
                line-height: 1.3;
            }

        .related-note-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.85rem;
            color: var(--text-secondary);
            margin-bottom: 0.5rem;
        }

        .related-note-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 0.25rem;
        }

        .related-note-tag {
            background: var(--bg-secondary);
            color: var(--text-primary);
            padding: 0.2rem 0.5rem;
            border-radius: 10px;
            font-size: 0.7rem;
        }

        .comments-section {
            background: var(--bg-tertiary);
            border: 1px solid var(--border-primary);
            border-radius: 12px;
            margin-top: 2rem;
            overflow: hidden;
        }

        .comments-header {
            padding: 2rem;
            border-bottom: 1px solid var(--border-primary);
            background: var(--bg-secondary);
        }

        .comments-title {
            color: var(--text-primary);
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

            .comments-title i {
                color: var(--accent-primary);
            }

        .comments-list {
            padding: 2rem;
        }

        /* .comment {
            margin-bottom: 2rem;
            padding-bottom: 2rem;
            border-bottom: 1px solid var(--border-primary);
        }

            .comment:last-child {
                margin-bottom: 0;
                padding-bottom: 0;
                border-bottom: none;
            } */

        .comment-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .comment-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            border: 2px solid var(--border-primary);
            object-fit: cover;
        }

        .comment-author {
            color: var(--accent-primary);
            font-weight: 600;
            text-decoration: none;
        }

            .comment-author:hover {
                text-decoration: underline;
            }

        .comment-date {
            color: var(--text-secondary);
            font-size: 0.85rem;
        }

        .comment-edited {
            color: var(--text-secondary);
            font-size: 0.8rem;
            font-style: italic;
        }

        .comment-content {
            color: var(--text-primary);
            line-height: 1.6;
            margin-bottom: 1rem;
            padding-left: 3rem;
        }

        .comment-actions {
            padding-left: 3rem;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .comment-action {
            background: none;
            border: none;
            color: var(--text-secondary);
            font-size: 0.85rem;
            cursor: pointer;
            transition: color 0.2s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

            .comment-action:hover {
                color: var(--accent-primary);
            }

            .comment-action.liked {
                color: #dc3545;
            }

        .comment-replies {
            margin-left: 3rem;
            margin-top: 1.5rem;
            padding-left: 2rem;
            border-left: 2px solid var(--border-primary);
        }

        .add-comment-form {
            padding: 2rem;
            background: var(--bg-primary);
            border-top: 1px solid var(--border-primary);
        }

        .comment-form-group {
            margin-bottom: 1.5rem;
        }

        .comment-textarea {
            width: 100%;
            min-height: 120px;
            padding: 1rem;
            background: var(--bg-secondary);
            border: 2px solid var(--border-primary);
            border-radius: 6px;
            color: var(--text-primary);
            font-size: 1rem;
            line-height: 1.6;
            resize: vertical;
            transition: border-color 0.3s ease;
        }

            .comment-textarea:focus {
                outline: none;
                border-color: var(--accent-primary);
                box-shadow: 0 0 0 3px rgba(88, 166, 255, 0.1);
            }

            .comment-textarea::placeholder {
                color: var(--text-secondary);
            }

        .comment-form-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .comment-help {
            color: var(--text-secondary);
            font-size: 0.85rem;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 6px;
            font-size: 0.95rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--accent-secondary), var(--accent-primary));
            color: white;
        }

            .btn-primary:hover {
                box-shadow: 0 8px 25px rgba(88, 166, 255, 0.3);
            }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        @@media (max-width: 1024px) {
            .content-grid {
                grid-template-columns: 1fr;
            }

            .sidebar {
                order: -1;
            }
        }

        @@media (max-width: 768px) {
            .note-actions {
                position: static;
                justify-content: center;
                margin-top: 2rem;
            }

            .note-header {
                padding: 2rem 1.5rem;
            }

            .note-title {
                font-size: 2rem;
            }

            .note-meta {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }

            .note-content {
                padding: 1.5rem;
                max-width: 90vw;
            }

            .comment-content,
            .comment-actions {
                padding-left: 0;
            }

            .comment-replies {
                margin-left: 0;
                padding-left: 1rem;
            }

            .action-btn {
                flex: 1;
                justify-content: center;
            }
        }
    </style>
}

@* @using CodeStash.Application.Utilities
@using CodeStash.Domain.Entities
@model Note
@inject UserHelper UserHelper

@{
    ViewData["Title"] = @Model?.Title;
}

<h1>Details</h1>

<div class="container">
    <div class="row">
        <div class="row">
            <div class="col-8">
                <a class="btn btn-primary" asp-controller="Notes" asp-action="Index">Back To All Notes</a>
            </div>

            @if (UserHelper.IsAuthenticated())
            {
                <div class="col-4 gx-2">
                    <a class="btn btn-secondary upsert" asp-controller="Notes" asp-action="Upsert" asp-route-id="@Model?.Id">Edit Note</a>
                    <a class="btn btn-danger delete" href="javascript:void(0);" onclick="confirmDelete('@Model?.Id')">Delete Note</a>
                </div>
            }
            
        </div>
        <div class="row">
            <h2 class="my-3">@Model?.Title</h2>
            <h6 class="note-date" style="display:none;" data-utc-date="@Model?.ModifiedAt.Value.ToString("o")"></h6>
            <span class ="note-date created-date" data-utc-date="@Model?.CreatedAt.ToString("o")"></span>
            <div class="noteContent">@Html.Raw(Model?.Content)</div>
        </div>
    </div>
</div>

@{
    <link href="~/lib/highlightjs/styles/github-dark.css" rel="stylesheet" />
    <link href="~/lib/highlightjs/styles/github-dark.min.css" rel="stylesheet" />
}

@section Scripts{
    <script src="~/lib/highlightjs/highlight.js"></script>
    <script src="~/lib/highlightjs/highlight.min.js"></script>
    <script>hljs.highlightAll();</script>

    <script src="~/js/notes-details.js"></script>

    Add sweet alert cdn
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.12.2/dist/sweetalert2.all.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.12.2/dist/sweetalert2.min.css">

    <style>
        /* Header styles */
        h1 {
            font-size: clamp(1.75rem, 4vw, 2.5rem);
            margin-bottom: clamp(1rem, 3vw, 2rem);
            border-bottom: 2px solid #b5f8fe99;
            padding-bottom: 0.5rem;
            color: #edf7f6;
        }

        /* Link styles */
        .btn {
            border: 1px solid #b5f8fe99;
            transition: all 0.3s ease;
            padding: clamp(6px, 1vw, 8px) clamp(12px, 2vw, 16px);
            width: 100%;
            max-width: 150px
        }

        /* Primary button override */
        .btn-primary {
            background-color: transparent;
            color: #edf7f6;
            border-color: #b5f8fe99;
        }

            .btn-primary:hover {
                background-color: #b5f8fe22;
                border-color: #b5f8fe;
            }

        /* Secondary button override */
        .btn-secondary {
            background-color: transparent;
            color: #edf7f6;
            border-color: #b5f8fe99;
        }

            .btn-secondary:hover {
                background-color: #b5f8fe22;
                border-color: #b5f8fe;
            }

        /* Danger button override */
        .btn-danger {
            background-color: transparent;
            color: #edf7f6;
            border-color: #dc3545;
        }

            .btn-danger:hover {
                background-color: rgba(220, 53, 69, 0.2);
                border-color: #dc3545;
            }

        /* Focus states for all buttons */
        .btn:focus {
            box-shadow: 0 0 5px #b5f8fe66;
            outline: none;
        }
        .gx-2{
            display: flex;
            flex-wrap: wrap;
            gap: 4px;
            justify-content: end;
        }
    </style>
}
 *@