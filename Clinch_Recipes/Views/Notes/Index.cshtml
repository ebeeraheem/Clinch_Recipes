@model List<NoteViewModel>

<h1>All notes</h1>
<a asp-controller="Account" asp-action="Login">Login</a>

@if (User.Identity?.IsAuthenticated is null or false)
{
    <div style="color: red">Bad</div>
}
else
{
    <div style="color: teal">Good</div>
    <a asp-controller="Account" asp-action="Logout">Logout</a>
}

<div class="input-group mb-3 searchNotes">
    <input type="search" autofocus class="form-control rounded" placeholder="Search" aria-label="Search" aria-describedby="search-addon"/>
    <button type="button" class="btn btn-outline-primary">search</button>
</div>

<!--Show 'Add New Note' button if user is authenticated-->
@if (User.Identity?.IsAuthenticated is true)
{
    <a asp-controller="Notes" asp-action="Upsert" class="btn btn-primary takeNote">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-lg" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2" />
        </svg>
        Add New Note
    </a>
}

<div class="container">
    <div class="row row-cols-2 row-cols-md-4 g-2" id="notes-container">
        @foreach (var note in Model)
        {
            <div class="col note-item" data-title="@note.Title">
                <a class="noteItem" asp-controller="Notes" asp-action="Details" asp-route-id="@note.Id">
                    <h4>@note.Title</h4>
                    <h6 class="note-date" data-utc-date="@note.LastUpdatedDate.ToString("o")"></h6>
                </a>
            </div>
        }
    </div>
    <div id="loading" class="text-center my-4" style="display:none;">Loading...</div>
    <div id="end-message" class="mb-4" style="display: none; text-align: center;">No more notes to load</div>
</div>


@{
    <script>
    const fetchUrl = '@Url.Action("GetMoreNotes", "Notes")';
    let page = 2;
    let isLoading = false;
    let hasMoreNotes = true;
    const notesCache = {}; // Object to store cached pages

    async function loadMoreNotes() {
        if (isLoading || !hasMoreNotes) return;
        isLoading = true;

        document.getElementById('loading').style.display = 'block';

        try {
            // Check if the page is already cached
            if (notesCache[page]) {
                renderNotes(notesCache[page]);
                isLoading = false;
                document.getElementById('loading').style.display = 'none';
                page++;
                return;
            }

            const response = await fetch(`${fetchUrl}?page=${page}&pageSize=20`);            
            if (!response.ok) throw new Error('Failed to load notes');
            
            const notes = await response.json();
            
            if (notes.length <= 0){
                hasMoreNotes = false;
                document.getElementById('end-message').style.display = 'block';
                return;
            }            
            
            notesCache[page] = notes; // Cache the current page

            renderNotes(notes);

            if (notes.length > 0) {
                page++; // Increment the page number
            }
        } catch (error) {
            console.error(error);
        } finally {
            document.getElementById('loading').style.display = 'none';
            isLoading = false;
        }
    }

    function renderNotes(notes) {
        const container = document.getElementById('notes-container');
        notes.forEach(note => {
            const noteDiv = document.createElement('div');
            noteDiv.classList.add('col', 'note-item');
            noteDiv.setAttribute('data-title', note.title);

            noteDiv.innerHTML = `
                <a class="noteItem" href="/Notes/Details/${note.id}">
                    <h4>${note.title}</h4>
                    <h6 class="note-date">${new Date(note.lastUpdatedDate).toLocaleDateString()}</h6>
                </a>
            `;
            container.appendChild(noteDiv);
        });
    }

    // Infinite scrolling logic
    window.addEventListener('scroll', () => {
        if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 200 && !isLoading) {
            loadMoreNotes();
        }
    });    
    </script>

    <style>
            .searchNotes:focus-within{
                outline: 2px solid #b5f8fe;
                border-radius: 5px;
            }
            .searchNotes input,
            .searchNotes input:focus{
                background-color: transparent;
                border-radius: 5px 0 0 5px !important;
                border: 1px solid #edf7f6;
                color: #edf7f6;
                box-shadow: none;
            }
            .searchNotes button{
                border-radius: 0 5px 5px 0;
                border-color: #edf7f6;
                background-color: #edf7f6;
                color: #02182b;
            }

            .searchNotes button:hover{
                border-color: #edf7f6;
                background-color: #b5f8fe;
                color: #02182b;
            }
            .noteItem{
                display: block;
                color: #edf7f6dd;
                padding: 0.75em 0.35em;
                padding-block-end: 3em;
                border: 1px solid #b5f8fe99;
                border-radius: 10px;
                text-decoration: none;
                position: relative;
            }

            .noteItem:hover {
                    color: #edf7f6dd;
                    background-color: #b5f8fe22;
            }

                .noteItem h4{
                    font-weight:700;
                    font-size: 90%;
                }

            .noteItem h6{
                    font-size: 80%;
                    position: absolute;
                bottom: 5px;
            }

        .note-item{
            display:grid;
        }

            .takeNote {
                background-color: #b5f8fe;
                border-color: #b5f8fe;
                color: #02182b;
                padding-block: 0.7em;
                position: fixed;
                border-radius: 50px;
                bottom: calc(0vh + 20px);
                left: 50%;
                transform: translateX(-50%);
                z-index: 1000;
            }
            .takeNote:hover{
                    border-color: #b5f8fe;
                    background-color: #02182b;
                    color: #b5f8fe;
            }
            .takeNote svg{
                vertical-align: sub;
            }
        </style>
}