@using CodeStash.ViewModels
@model LoginViewModel
@{
    ViewData["Title"] = "Login - CodeStash";
}

<div class="auth-container">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="auth-card">
                    <div class="auth-header">
                        <h1><i class="fas fa-sign-in-alt me-3"></i>Welcome Back</h1>
                        <p>Sign in to access your CodeStash account and continue coding</p>
                    </div>

                    <div class="auth-body">
                        <form asp-action="Login" asp-controller="Account" method="post" id="loginForm" novalidate>
                            <input asp-for="ReturnUrl" type="hidden" />

                            <div asp-validation-summary="ModelOnly" class="validation-summary-errors"></div>

                            <div class="form-group">
                                <label asp-for="EmailOrUsername" class="form-label"></label>
                                <input asp-for="EmailOrUsername" for="EmailOrUsername"
                                       class="form-control"
                                       placeholder="Enter your email or username"
                                       autocomplete="on" />
                                <span asp-validation-for="EmailOrUsername" class="field-validation-error"></span>
                            </div>

                            <div class="form-group">
                                <label asp-for="Password" class="form-label"></label>
                                <input asp-for="Password" for="Password"
                                       class="form-control"
                                       type="password"
                                       placeholder="Enter your password"
                                       autocomplete="current-password" />
                                <span asp-validation-for="Password" class="field-validation-error"></span>
                            </div>

                            <div class="form-check">
                                <input asp-for="RememberMe" for="RememberMe" class="form-check-input" type="checkbox" />
                                <label asp-for="RememberMe" for="RememberMe" class="form-check-label"></label>
                            </div>

                            <button type="submit" class="btn-auth">
                                <span class="loading-spinner"></span>
                                <span class="btn-text">Sign In</span>
                            </button>
                        </form>

                        <div class="auth-links">
                            <p class="text-muted mb-3">
                                Don't have an account?
                                <a asp-action="Register" asp-controller="Account" asp-route-returnUrl="@ViewData["ReturnUrl"]">
                                    Create one here
                                </a>
                            </p>
                            <p class="text-muted">
                                <a href="#" id="forgotPasswordLink">Forgot your password?</a>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const loginForm = document.getElementById('loginForm');
        const submitButton = loginForm.querySelector('button[type="submit"]');
        const loadingSpinner = submitButton.querySelector('.loading-spinner');
        const buttonText = submitButton.querySelector('.btn-text');

        // Form submission handling
        loginForm.addEventListener('submit', (e) => {
            // Show loading state
            submitButton.disabled = true;
            loadingSpinner.style.display = 'inline-block';
            buttonText.textContent = 'Signing In...';

            // Basic client-side validation
            const emailOrUsername = document.getElementById('EmailOrUsername');
            const password = document.getElementById('Password');

            let isValid = true;

            // Clear previous errors
            clearFieldError(emailOrUsername);
            clearFieldError(password);

            // Validate email/username
            if (!emailOrUsername.value.trim()) {
                showFieldError(emailOrUsername, 'Email or Username is required');
                isValid = false;
            }

            // Validate password
            if (!password.value.trim()) {
                showFieldError(password, 'Password is required');
                isValid = false;
            }

            if (!isValid) {
                e.preventDefault();
                resetSubmitButton();
                return false;
            }
        });

        // Real-time validation
        const inputs = loginForm.querySelectorAll('input[type="text"], input[type="email"], input[type="password"]');
        inputs.forEach(input => {
            input.addEventListener('blur', () => validateField(input));
            input.addEventListener('input', () => {
                if (input.classList.contains('error')) {
                    clearFieldError(input);
                }
            });
        });

        // Forgot password link
        document.getElementById('forgotPasswordLink').addEventListener('click', (e) => {
            e.preventDefault();
            alert('Password reset functionality will be implemented soon!');
        });

        function validateField(field) {
            const value = field.value.trim();

            switch (field.id) {
                case 'EmailOrUsername':
                    if (!value) {
                        showFieldError(field, 'Email or Username is required');
                        return false;
                    }
                    break;

                case 'Password':
                    if (!value) {
                        showFieldError(field, 'Password is required');
                        return false;
                    }
                    break;
            }

            clearFieldError(field);
            return true;
        }

        function showFieldError(field, message) {
            field.classList.add('error');
            field.style.borderColor = '#dc3545';

            let errorSpan = field.parentNode.querySelector('.field-validation-error');
            if (errorSpan) {
                errorSpan.textContent = message;
                errorSpan.style.display = 'block';
            }
        }

        function clearFieldError(field) {
            field.classList.remove('error');
            field.style.borderColor = '';

            let errorSpan = field.parentNode.querySelector('.field-validation-error');
            if (errorSpan) {
                errorSpan.textContent = '';
                errorSpan.style.display = 'none';
            }
        }

        function resetSubmitButton() {
            submitButton.disabled = false;
            loadingSpinner.style.display = 'none';
            buttonText.textContent = 'Sign In';
        }
    });
</script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

<style>
    .auth-container {
        min-height: calc(100vh - 76px);
        background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
        display: flex;
        align-items: center;
        padding: 2rem 0;
    }

    .auth-card {
        background: var(--bg-tertiary);
        border: 1px solid var(--border-primary);
        border-radius: 12px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
        overflow: hidden;
        max-width: 900px;
        width: 100%;
    }

    .auth-header {
        background: linear-gradient(135deg, var(--accent-secondary) 0%, var(--accent-primary) 100%);
        color: white;
        text-align: center;
        padding: 3rem 2rem;
    }

        .auth-header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .auth-header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

    .auth-body {
        padding: 3rem;
    }

    .form-group {
        margin-bottom: 2rem;
    }

    .form-label {
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 0.5rem;
        display: block;
        font-size: 1rem;
    }

    .form-control {
        width: 100%;
        padding: 1rem 1.25rem;
        background: var(--bg-primary);
        border: 2px solid var(--border-primary);
        border-radius: 8px;
        color: var(--text-primary);
        font-size: 1rem;
        transition: all 0.3s ease;
    }

        .form-control:focus {
            color: var(--text-primary);
            outline: none;
            border-color: var(--accent-primary);
            box-shadow: 0 0 0 3px rgba(88, 166, 255, 0.1);
            background: var(--bg-secondary);
        }

        .form-control::placeholder {
            color: var(--text-secondary);
        }

    .form-check {
        display: flex;
        align-items: center;
        margin-bottom: 2rem;
    }

    .form-check-input {
        width: 1.25rem;
        height: 1.25rem;
        margin-right: 0.75rem;
        accent-color: var(--accent-primary);
    }

    .form-check-label {
        color: var(--text-primary);
        font-size: 1rem;
        cursor: pointer;
    }

    .btn-auth {
        width: 100%;
        padding: 1rem 2rem;
        background: linear-gradient(135deg, var(--accent-secondary) 0%, var(--accent-primary) 100%);
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-bottom: 1.5rem;
    }

        .btn-auth:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(88, 166, 255, 0.3);
        }

        .btn-auth:active {
            transform: translateY(0);
        }

        .btn-auth:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

    .auth-links {
        text-align: center;
        padding-top: 2rem;
        border-top: 1px solid var(--border-primary);
    }

        .auth-links a {
            color: var(--accent-primary);
            text-decoration: none;
            font-weight: 500;
            transition: color 0.2s ease;
        }

            .auth-links a:hover {
                color: var(--accent-secondary);
                text-decoration: underline;
            }

    .field-validation-error {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.5rem;
        display: block;
    }

    .validation-summary-errors {
        background: rgba(220, 53, 69, 0.1);
        border: 1px solid rgba(220, 53, 69, 0.3);
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 2rem;
    }

        .validation-summary-errors ul {
            margin: 0;
            padding-left: 1.5rem;
            color: #dc3545;
        }

    .loading-spinner {
        display: none;
        width: 20px;
        height: 20px;
        border: 2px solid transparent;
        border-top: 2px solid currentColor;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-right: 0.5rem;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    @@media (max-width: 768px) {
        .auth-body {
            padding: 2rem;
        }

        .auth-header {
            padding: 2rem 1.5rem;
        }

            .auth-header h1 {
                font-size: 2rem;
            }
    }
</style>


@* @using CodeStash.ViewModels
@model LoginModel

 @{
    ViewBag.Title = "Login";
    string? returnUrl = Context.Request.Query["ReturnUrl"];
}

<body>
    <div class="login-container">
        <div class="header">
            <h2>Welcome Back</h2>
            <a class="back-btn" href="/Notes">← Back to Homepage</a>
        </div>

        <div asp-validation-summary="All" class="text-danger"></div>

        <form method="post">
            <div class="form-group">
                <label for="username">Email</label>
                <input asp-for="Email" type="email" placeholder="Enter your email" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <div class="password-container">
                    <input asp-for="Password" type="password" id="password" placeholder="Enter your password" />
                    <button type="button" class="toggle-password" onclick="togglePasswordVisibility()">
                        <svg id="eyeOpen" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><!--!Font Awesome Free 6.7.2 by @@fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.--><path d="M288 32c-80.8 0-145.5 36.8-192.6 80.6C48.6 156 17.3 208 2.5 243.7c-3.3 7.9-3.3 16.7 0 24.6C17.3 304 48.6 356 95.4 399.4C142.5 443.2 207.2 480 288 480s145.5-36.8 192.6-80.6c46.8-43.5 78.1-95.4 93-131.1c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C433.5 68.8 368.8 32 288 32zM144 256a144 144 0 1 1 288 0 144 144 0 1 1 -288 0zm144-64c0 35.3-28.7 64-64 64c-7.1 0-13.9-1.2-20.3-3.3c-5.5-1.8-11.9 1.6-11.7 7.4c.3 6.9 1.3 13.8 3.2 20.7c13.7 51.2 66.4 81.6 117.6 67.9s81.6-66.4 67.9-117.6c-11.1-41.5-47.8-69.4-88.6-71.1c-5.8-.2-9.2 6.1-7.4 11.7c2.1 6.4 3.3 13.2 3.3 20.3z" /></svg>

                        <svg id="eyeClose" style="display:none;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><!--!Font Awesome Free 6.7.2 by @@fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.--><path d="M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L525.6 386.7c39.6-40.6 66.4-86.1 79.9-118.4c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C465.5 68.8 400.8 32 320 32c-68.2 0-125 26.3-169.3 60.8L38.8 5.1zM223.1 149.5C248.6 126.2 282.7 112 320 112c79.5 0 144 64.5 144 144c0 24.9-6.3 48.3-17.4 68.7L408 294.5c8.4-19.3 10.6-41.4 4.8-63.3c-11.1-41.5-47.8-69.4-88.6-71.1c-5.8-.2-9.2 6.1-7.4 11.7c2.1 6.4 3.3 13.2 3.3 20.3c0 10.2-2.4 19.8-6.6 28.3l-90.3-70.8zM373 389.9c-16.4 6.5-34.3 10.1-53 10.1c-79.5 0-144-64.5-144-144c0-6.9 .5-13.6 1.4-20.2L83.1 161.5C60.3 191.2 44 220.8 34.5 243.7c-3.3 7.9-3.3 16.7 0 24.6c14.9 35.7 46.2 87.7 93 131.1C174.5 443.2 239.2 480 320 480c47.8 0 89.9-12.9 126.2-32.5L373 389.9z" /></svg>
                    </button>
                </div>
            </div>

            <div class="form-group">
                <label class="rememberMe" for="RememberMe">
                    <input asp-for="RememberMe" type="checkbox" />
                    Remember me
                </label>
            </div>

            <input type="hidden" id="returnUrl" name="returnUrl" value="@returnUrl" />

            <button type="submit">Sign In</button>
        </form>
    </div>
</body>

<script>
    function togglePasswordVisibility() {
        const passwordInput = document.querySelector("#password");
        const eyeOpen = document.querySelector("#eyeOpen");
        const eyeClose = document.querySelector("#eyeClose");

        if (passwordInput.type === "password") {
            passwordInput.type = "text";
            eyeOpen.style.display = "none";
            eyeClose.style.display = "block";
        } else {
            passwordInput.type = "password";
            eyeOpen.style.display = "block";
            eyeClose.style.display = "none";
        }
    }
</script>

<style>
    .login-container {
        padding: 40px;
        border: 1px solid #b5f8fe99;
        border-radius: 12px;
        box-shadow: 0 8px 24px rgba(2, 24, 43, 0.1);
        width: 100%;
        max-width: 420px;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .header {
        margin-bottom: 30px;
        text-align: center;
    }

    h2 {
        font-size: 28px;
        margin-bottom: 20px;
    }

    .back-btn {
        display: inline-block;
        text-decoration: none;
        color: #b5f8fe;
        font-size: 14px;
        margin-bottom: 20px;
        transition: all 0.3s ease;
    }

    .back-btn:hover {
        color: #b5f8fe;
        text-decoration: underline;
    }

    .error-message {
        background-color: #ffe6e6;
        color: #dc3545;
        padding: 12px;
        border-radius: 6px;
        margin-bottom: 20px;
        font-size: 14px;
    }

    .form-group {
        margin-bottom: 24px;
    }

    label {
        display: block;
        margin-bottom: 8px;
        font-size: 14px;
        font-weight: 500;
    }

    input {
        width: 100%;
        padding: 12px;
        color: white;
        background-color: #02182b;
        border: 2px solid #b5f8fe99;
        border-radius: 6px;
        font-size: 16px;
        transition: all 0.3s ease;
    }

    input:focus {
        outline: none;
        border-color: #b5f8fe;
        box-shadow: 0 0 0 3px rgba(181, 248, 254, 0.3);
    }

    button {
        width: 100%;
        padding: 14px;
        background-color: white;
        color: #02182b;
        border: 1px solid #b5f8fe99;
        border-radius: 6px;
        font-size: 16px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    button:hover {
        color: #b5f8fe;
        font-weight: 500;
        background-color: #02182b;
    }

    .password-container {
        position: relative;
    }

    .toggle-password {
        position: absolute;
        right: 0;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        cursor: pointer;
        color: #666;
        width: auto;
    }

        .toggle-password:hover {
            background-color: transparent;
        }

        .toggle-password svg {
            width: 2rem;
            fill: #b5f8fe;
        }

        .toggle-password:hover svg {
            fill: #b5f8fe99;
        }

    .rememberMe {
        width: fit-content;
        cursor: pointer;
    }

        .rememberMe input {
            width: auto;
        }
</style>
 *@