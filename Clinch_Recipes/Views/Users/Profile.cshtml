@using System.Text.Json
@using CodeStash.Application.Models.Dtos
@model UserProfileDto
@{
    ViewData["Title"] = $"@{Model.UserName}'s Profile";
    ViewData["Description"] = Model.Bio
        ?? $"Profile of @{Model.UserName} on CodeStash. View notes, stats, and more.";

    ViewData["OgImage"] = Model.ProfileImageUrl; // TODO: Consider adding a fallback image
}

<div class="profile-container">
    <div class="container">
        <!-- Profile Header -->
        <div class="profile-header">
            <div class="profile-actions">
                <button class="btn btn-secondary" onclick="shareProfile('@Model.UserName')">
                    <i class="fas fa-share"></i> Share Profile
                </button>
                <a asp-action="EditProfile" class="btn btn-secondary">
                    <i class="fas fa-edit"></i> Edit Profile
                </a>
                <a asp-action="Settings" class="btn btn-secondary">
                    <i class="fas fa-cog"></i> Settings
                </a>
            </div>

            <div class="profile-info">
                @if (!string.IsNullOrWhiteSpace(Model.ProfileImageUrl))
                {
                    <img src="@Model.ProfileImageUrl"
                         alt="@Model.UserName"
                         class="profile-avatar" />
                }
                else
                {
                    <span class="profile-avatar profile-avatar-emoji" title="@Model.UserName" aria-label="User">
                        <i class="fas fa-user"></i>
                    </span>
                }

                <div class="profile-details">
                    <h1 class="profile-username">@@@Model.UserName</h1>

                    @if (!string.IsNullOrEmpty(Model.Bio))
                    {
                        <p class="profile-bio">@Model.Bio</p>
                    }

                    <div class="profile-meta">
                        <div class="profile-meta-item">
                            <i class="fas fa-calendar-alt"></i>
                            <span>Joined @Model.JoinedAt.ToString("MMMM yyyy")</span>
                        </div>

                        @if (!string.IsNullOrEmpty(Model.Location))
                        {
                            <div class="profile-meta-item">
                                <i class="fas fa-map-marker-alt"></i>
                                <span>@Model.Location</span>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(Model.Email))
                        {
                            <div class="profile-meta-item">
                                <i class="fas fa-envelope"></i>
                                <span>@Model.Email</span>
                            </div>
                        }

                        @* <div class="profile-meta-item">
                            <i class="fas fa-clock"></i>
                            <span>Last active @Model.LastActiveAt.ToString("MMM dd, yyyy")</span>
                        </div> *@
                    </div>

                    <div class="social-links">
                        @if (!string.IsNullOrEmpty(Model.WebsiteUrl))
                        {
                            <a href="@Model.WebsiteUrl" target="_blank" class="social-link">
                                <i class="fas fa-globe"></i>
                                <span>Website</span>
                            </a>
                        }

                        @if (!string.IsNullOrEmpty(Model.GitHubUsername))
                        {
                            <a href="https://github.com/@Model.GitHubUsername" target="_blank" class="social-link">
                                <i class="fab fa-github"></i>
                                <span>GitHub</span>
                            </a>
                        }

                        @if (!string.IsNullOrEmpty(Model.TwitterHandle))
                        {
                            <a href="https://x.com/@Model.TwitterHandle" target="_blank" class="social-link">
                                <i class="fab fa-twitter"></i>
                                <span>X (Twitter)</span>
                            </a>
                        }

                        @if (!string.IsNullOrEmpty(Model.LinkedInProfile))
                        {
                            <a href="@Model.LinkedInProfile" target="_blank" class="social-link">
                                <i class="fab fa-linkedin"></i>
                                <span>LinkedIn</span>
                            </a>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Statistics -->
        <div class="section-card">
            <h2 class="section-title">
                <i class="fas fa-chart-line"></i>
                Statistics
            </h2>

            <div class="stats-grid">
                <div class="stat-item">
                    <span class="stat-number">@Model.TotalNotes</span>
                    <div class="stat-label">Total Notes</div>
                </div>
                <div class="stat-item">
                    <span class="stat-number">@Model.TotalViews.ToString("N0")</span>
                    <div class="stat-label">Total Views</div>
                </div>
                @* <div class="stat-item">
                    <span class="stat-number">@Model.TotalLikes</span>
                    <div class="stat-label">Likes Received</div>
                </div>
                <div class="stat-item">
                    <span class="stat-number">@Model.Followers</span>
                    <div class="stat-label">Followers</div>
                </div>
                <div class="stat-item">
                    <span class="stat-number">@Model.Following</span>
                    <div class="stat-label">Following</div>
                </div> *@
                <div class="stat-item">
                    <span class="stat-number">@Model.AverageViewsPerNote.ToString("F1")</span>
                    <div class="stat-label">Avg Views/Note</div>
                </div>
            </div>

            @* <div class="activity-chart">
                <div class="chart-title">Activity Over Time</div>
                <div class="activity-chart">
                    <div class="chart-title">Activity Over Time</div>
                    <canvas id="activityChart" height="200"></canvas>
                </div>
            </div> *@
        </div>

        <!-- Content Grid -->
        <div class="content-grid">
            <!-- Main Content -->
            <div class="main-content" style="padding-top:0;">
                <!-- Recent Notes -->
                <div class="section-card">
                    <h2 class="section-title">
                        <i class="fas fa-clock"></i>
                        Recent Notes
                    </h2>

                    <div class="notes-list">
                        @foreach (var note in Model.RecentNotes.Take(3))
                        {
                            <div class="note-item">
                                <h3 class="note-title">
                                    <a href="/Note/@note.Slug">@note.Title</a>
                                </h3>
                                <div class="note-meta">
                                    <span><i class="fas fa-eye me-1"></i> @note.ViewCount views</span>
                                    <span>@note.CreatedAt.ToString("MMM dd, yyyy")</span>
                                </div>
                                <div class="note-tags">
                                    @foreach (var tag in note.Tags)
                                    {
                                        <span class="note-tag">@tag.Name</span>
                                    }
                                </div>
                            </div>
                        }
                    </div>

                    <div class="text-center mt-3">
                        <a asp-controller="Notes" asp-action="MyNotes" class="btn btn-secondary">
                            <i class="fas fa-list me-2"></i>View All Notes
                        </a>
                    </div>
                </div>

                <!-- Popular Notes -->
                <div class="section-card">
                    <h2 class="section-title">
                        <i class="fas fa-fire"></i>
                        Most Popular Notes
                    </h2>

                    <div class="notes-list">
                        @foreach (var note in Model.PopularNotes.Take(3))
                        {
                            <div class="note-item">
                                <h3 class="note-title">
                                    <a href="/Note/@note.Slug">@note.Title</a>
                                </h3>
                                <div class="note-meta">
                                    <span><i class="fas fa-fire me-1 text-warning"></i> @note.ViewCount views</span>
                                    <span>@note.CreatedAt.ToString("MMM dd, yyyy")</span>
                                </div>
                                <div class="note-tags">
                                    @foreach (var tag in note.Tags)
                                    {
                                        <span class="note-tag">@tag.Name</span>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="sidebar">
                <!-- Favorite Languages -->
                @* @if (Model.FavoriteLanguages.Any())
                {
                    <div class="section-card">
                        <h3 class="section-title">
                            <i class="fas fa-heart"></i>
                            Favorite Languages
                        </h3>

                        <div class="favorite-languages">
                            @foreach (var language in Model.FavoriteLanguages)
                            {
                                <span class="language-tag">@language</span>
                            }
                        </div>
                    </div>
                } *@

                @* <!-- Language Distribution -->
                <div class="section-card">
                    <h3 class="section-title">
                        <i class="fas fa-code"></i>
                        Language Distribution
                    </h3>

                    <div class="language-distribution">
                        @foreach (var lang in Model.LanguageDistribution.OrderByDescending(x => x.Value).Take(5))
                        {
                            <div class="language-item">
                                <span class="language-name">@lang.Key</span>
                                <span class="language-count">@lang.Value</span>
                            </div>
                        }
                    </div>
                </div> *@

                <!-- Quick Stats -->
                <div class="section-card">
                    <h3 class="section-title">
                        <i class="fas fa-tachometer-alt"></i>
                        Quick Stats
                    </h3>

                    <div class="language-distribution">
                        <div class="language-item">
                            <span class="language-name">Notes This Week</span>
                            <span class="language-count">@Model.NotesThisWeek</span>
                        </div>
                        <div class="language-item">
                            <span class="language-name">Notes This Month</span>
                            <span class="language-count">@Model.NotesThisMonth</span>
                        </div>
                        <div class="language-item">
                            <span class="language-name">Notes This Year</span>
                            <span class="language-count">@Model.NotesThisYear</span>
                        </div>
                        @* <div class="language-item">
                            <span class="language-name">Busiest Month</span>
                            <span class="language-count">
                                @if (Model.BusiestMonth != null)
                                {
                                    @($"{Model.BusiestMonth} ({Model.BusiestMonthNoteCount} notes)")
                                }
                                else
                                {
                                    <span>No notes yet</span>
                                }
                            </span>
                        </div> *@
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    @* Chart Script
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Example: Use Model.NotesPerMonth for data
            const notesPerMonth = @Html.Raw(JsonSerializer.Serialize(Model.NotesPerMonth ?? []));

            // Prepare labels and data
            const labels = Object.keys(notesPerMonth);
            const data = Object.values(notesPerMonth);

            const ctx = document.getElementById('activityChart').getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Notes Created',
                        data: data,
                        backgroundColor: 'rgba(88, 166, 255, 0.5)',
                        borderColor: 'rgba(31, 111, 235, 1)',
                        borderWidth: 2,
                        borderRadius: 6,
                        maxBarThickness: 40
                    }]
                },
                options: {
                    plugins: {
                        legend: { display: false }
                    },
                    scales: {
                        x: {
                            ticks: { color: getComputedStyle(document.body).getPropertyValue('--text-secondary') },
                            grid: { color: getComputedStyle(document.body).getPropertyValue('--border-primary') }
                        },
                        y: {
                            beginAtZero: true,
                            ticks: { color: getComputedStyle(document.body).getPropertyValue('--text-secondary') },
                            grid: { color: getComputedStyle(document.body).getPropertyValue('--border-primary') }
                        }
                    }
                }
            });
        });
    </script> *@


    <script>
            function shareProfile(username) {
                const url = '/User/' + encodeURIComponent(username);

                // Check if the browser supports the Web Share API
                if (navigator.share) {
                    navigator.share({
                        title: '@Model.UserName - CodeStash',
                        text: 'Check out @Model.UserName\'s profile on CodeStash',
                        url: url
                    }).catch(console.error);
                } else {
                    // Fallback to clipboard
                    navigator.clipboard.writeText(window.location.origin + url).then(() => {
                        showNotification('Profile link copied to clipboard!', 'success');
                    }).catch(() => {
                        showNotification('Could not copy link to clipboard', 'error');
                    });
                }
            }

            function showNotification(message, type) {
                const notification = document.createElement('div');
                notification.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show position-fixed`;
                notification.style.cssText = 'top: 100px; right: 20px; z-index: 9999; min-width: 300px;';
                notification.innerHTML = `
                    ${message}
                    <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
                `;

                document.body.appendChild(notification);

                setTimeout(() => {
                    if (notification.parentElement) {
                        notification.remove();
                    }
                }, 5000);
            }
    </script>
}

<style>
    .profile-container {
        background: var(--bg-primary);
        min-height: calc(100vh - 76px);
        padding: 2rem 0;
    }

    .profile-header {
        background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);
        border: 1px solid var(--border-primary);
        border-radius: 12px;
        padding: 2.5rem;
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
    }

        .profile-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--accent-primary), var(--accent-secondary));
        }

    .profile-info {
        display: flex;
        align-items: center;
        gap: 2rem;
        margin-block: 2rem;
    }

    .profile-avatar {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        border: 4px solid var(--accent-primary);
        object-fit: cover;
        box-shadow: 0 8px 25px rgba(88, 166, 255, 0.3);
    }

    .profile-avatar-emoji {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 120px;
        height: 120px;
        font-size: 3.5rem;
        border-radius: 50%;
        border: 4px solid var(--accent-primary);
        background: var(--bg-primary);
        box-shadow: 0 8px 25px rgba(88, 166, 255, 0.3);
        color: var(--text-secondary);
        user-select: none;
    }

    .profile-details h1 {
        color: var(--text-primary);
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }

    .profile-username {
        color: var(--accent-primary);
        font-size: 1.25rem;
        font-weight: 500;
        margin-bottom: 1rem;
    }

    .profile-bio {
        color: var(--text-secondary);
        font-size: 1.1rem;
        line-height: 1.6;
        margin-bottom: 1.5rem;
        max-width: 600px;
    }

    .profile-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        color: var(--text-secondary);
        font-size: 0.95rem;
    }

    .profile-meta-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .profile-meta-item i {
            color: var(--accent-primary);
            width: 16px;
        }

    .social-links {
        display: flex;
        gap: 1rem;
        margin-top: 1.5rem;
        flex-wrap: wrap;
    }

    .social-link {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        background: var(--bg-primary);
        border: 1px solid var(--border-primary);
        border-radius: 6px;
        color: var(--text-primary);
        text-decoration: none;
        transition: all 0.2s ease;
        font-size: 0.9rem;
    }

        .social-link:hover {
            background: var(--accent-primary);
            color: white;
            border-color: var(--accent-primary);
        }

    .social-links a:hover{
        color: white !important;
    }

    .profile-actions {
        position: absolute;
        top: 2rem;
        right: 2rem;
        display: flex;
        gap: 1rem;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 6px;
        font-size: 0.95rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--accent-secondary), var(--accent-primary));
        color: white;
    }

        .btn-primary:hover {
            box-shadow: 0 8px 25px rgba(88, 166, 255, 0.3);
        }

    .btn-secondary {
        background: var(--bg-primary);
        color: var(--text-primary);
        border: 1px solid var(--border-primary);
    }

        .btn-secondary:hover {
            background: var(--text-primary);
            color: var(--bg-primary);
        }

    .content-grid {
        display: grid;
        grid-template-columns: 1fr 350px;
        gap: 2rem;
    }

    .main-content {
        display: flex;
        flex-direction: column;
        gap: 2rem;
        margin-top: 2rem;
    }

    .sidebar {
        display: flex;
        flex-direction: column;
        gap: 2rem;
        margin-top: 2rem;
    }

    .section-card {
        background: var(--bg-tertiary);
        border: 1px solid var(--border-primary);
        border-radius: 8px;
        padding: 2rem;
    }

    .section-title {
        color: var(--text-primary);
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

        .section-title i {
            color: var(--accent-primary);
        }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .stat-item {
        text-align: center;
        padding: 1.5rem;
        background: var(--bg-primary);
        border: 1px solid var(--border-primary);
        border-radius: 8px;
        transition: transform 0.2s ease;
    }

        .stat-item:hover {
            border-color: var(--accent-primary);
        }

    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        color: var(--accent-primary);
        display: block;
        margin-bottom: 0.5rem;
    }

    .stat-label {
        color: var(--text-secondary);
        font-size: 0.9rem;
        font-weight: 500;
    }

    .favorite-languages {
        display: flex;
        flex-wrap: wrap;
        gap: 0.75rem;
    }

    .language-tag {
        background: var(--accent-secondary);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
    }

    .notes-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .note-item {
        background: var(--bg-primary);
        border: 1px solid var(--border-primary);
        border-radius: 6px;
        padding: 1.5rem;
        transition: all 0.2s ease;
    }

        .note-item:hover {
            border-color: var(--accent-primary);
        }

    .note-title {
        color: var(--text-primary);
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

        .note-title a {
            color: inherit;
            text-decoration: none;
            transition: color 0.2s ease;
        }

            .note-title a:hover {
                color: var(--accent-primary);
            }

    .note-meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 0.85rem;
        color: var(--text-secondary);
        margin-bottom: 0.75rem;
    }

    .note-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .note-tag {
        background: var(--bg-secondary);
        color: var(--text-primary);
        padding: 0.25rem 0.6rem;
        border-radius: 12px;
        font-size: 0.75rem;
        border: 1px solid var(--border-primary);
    }

    .activity-chart {
        background: var(--bg-primary);
        border: 1px solid var(--border-primary);
        border-radius: 6px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .chart-title {
        color: var(--text-primary);
        font-weight: 600;
        margin-bottom: 1rem;
    }

    .chart-placeholder {
        height: 200px;
        background: var(--bg-secondary);
        border: 1px dashed var(--border-primary);
        border-radius: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--text-secondary);
        font-style: italic;
    }

    .language-distribution {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .language-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        background: var(--bg-primary);
        border: 1px solid var(--border-primary);
        border-radius: 4px;
    }

    .language-name {
        color: var(--text-primary);
        font-weight: 500;
    }

    .language-count {
        color: var(--accent-primary);
        font-weight: 600;
    }

    @@media (max-width: 1024px) {
        .content-grid

    {
        grid-template-columns: 1fr;
    }

    .sidebar {
        order: -1;
    }

    .stats-grid {
        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    }

    }

    @@media (max-width: 768px) {
        .profile-info {
            flex-direction: column;
            text-align: center;
            gap: 1.5rem;
        }

    .profile-actions {
        position: static;
        justify-content: center;
        flex-wrap: wrap;
    }

            .profile-actions .btn{
                width: 100%;
            }

    .profile-header {
        padding: 2rem 1.5rem;
    }

    .profile-details h1 {
        font-size: 1.25rem;
    }

    .stats-grid {
        grid-template-columns: repeat(1, 1fr);
    }

    .profile-meta {
        justify-content: center;
    }

    }
</style>



