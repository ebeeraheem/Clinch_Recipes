@using CodeStash.ViewModels
@model ChangePasswordViewModel
@{
    ViewData["Title"] = "Change Password - CodeStash";
}

<div class="change-password-container">
    <div class="container">
        <div class="change-password-header">
            <h1><i class="fas fa-key text-primary me-3"></i>Change Password</h1>
            <p>Update your password to keep your account secure</p>
        </div>

        <div class="form-card">
            <div class="security-tips">
                <h3><i class="fas fa-shield-alt text-primary me-2"></i>Security Tips</h3>
                <ul>
                    <li>Use a combination of letters, numbers, and special characters</li>
                    <li>Make it at least 8 characters long</li>
                    <li>Avoid using personal information or common words</li>
                    <li>Don't reuse passwords from other accounts</li>
                    <li>Consider using a password manager</li>
                </ul>
            </div>

            <form asp-action="ChangePassword" method="post" id="changePasswordForm" novalidate>
                <div asp-validation-summary="ModelOnly" class="validation-summary-errors"></div>

                <div class="form-group">
                    <label asp-for="CurrentPassword" class="form-label required"></label>
                    <div class="password-input-container">
                        <input asp-for="CurrentPassword"
                               class="form-control"
                               type="password"
                               placeholder="Enter your current password"
                               id="currentPasswordInput" />
                        <button type="button" class="password-toggle" onclick="togglePassword('currentPasswordInput', this)">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                    <span asp-validation-for="CurrentPassword" class="field-validation-error"></span>
                </div>

                <div class="form-group">
                    <label asp-for="NewPassword" class="form-label required"></label>
                    <div class="password-input-container">
                        <input asp-for="NewPassword"
                               class="form-control"
                               type="password"
                               placeholder="Enter your new password"
                               id="newPasswordInput" />
                        <button type="button" class="password-toggle" onclick="togglePassword('newPasswordInput', this)">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                    <span asp-validation-for="NewPassword" class="field-validation-error"></span>

                    <div class="password-strength">
                        <div class="strength-text" id="strengthText"></div>
                        <div class="strength-bar">
                            <div class="strength-fill" id="strengthFill"></div>
                        </div>
                    </div>

                    <div class="password-requirements">
                        <div class="requirement" id="req-length">
                            <i class="fas fa-times"></i>
                            <span>At least 8 characters</span>
                        </div>
                        <div class="requirement" id="req-lowercase">
                            <i class="fas fa-times"></i>
                            <span>At least one lowercase letter</span>
                        </div>
                        <div class="requirement" id="req-uppercase">
                            <i class="fas fa-times"></i>
                            <span>At least one uppercase letter</span>
                        </div>
                        <div class="requirement" id="req-number">
                            <i class="fas fa-times"></i>
                            <span>At least one number</span>
                        </div>
                        <div class="requirement" id="req-special">
                            <i class="fas fa-times"></i>
                            <span>At least one special character</span>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label asp-for="ConfirmPassword" class="form-label required"></label>
                    <div class="password-input-container">
                        <input asp-for="ConfirmPassword"
                               class="form-control"
                               type="password"
                               placeholder="Confirm your new password"
                               id="confirmPasswordInput" />
                        <button type="button" class="password-toggle" onclick="togglePassword('confirmPasswordInput', this)">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                    <span asp-validation-for="ConfirmPassword" class="field-validation-error"></span>
                </div>

                <div class="form-actions">
                    <a href="/Users/Profile" class="btn btn-secondary">
                        <i class="fas fa-times"></i> Cancel
                    </a>
                    <button type="submit" class="btn btn-primary" id="submitBtn">
                        <i class="fas fa-key"></i> Change Password
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('changePasswordForm');
        const currentPasswordInput = document.getElementById('currentPasswordInput');
        const newPasswordInput = document.getElementById('newPasswordInput');
        const confirmPasswordInput = document.getElementById('confirmPasswordInput');
        const submitBtn = document.getElementById('submitBtn');
        const strengthText = document.getElementById('strengthText');
        const strengthFill = document.getElementById('strengthFill');

        // Password strength checking
        newPasswordInput.addEventListener('input', () => {
            updatePasswordStrength();
            validateConfirmPassword();
        });

        confirmPasswordInput.addEventListener('input', validateConfirmPassword);

        // Form submission
        form.addEventListener('submit', (e) => {
            if (!validateForm()) {
                e.preventDefault();
                return false;
            }

            // Show loading state
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Changing Password...';
        });

        function updatePasswordStrength() {
            const password = newPasswordInput.value;
            let score = 0;
            let feedback = '';

            // Check requirements
            const requirements = [
                { id: 'req-length', test: password.length >= 8 },
                { id: 'req-lowercase', test: /[a-z]/.test(password) },
                { id: 'req-uppercase', test: /[A-Z]/.test(password) },
                { id: 'req-number', test: /[0-9]/.test(password) },
                { id: 'req-special', test: /[^A-Za-z0-9]/.test(password) }
            ];

            requirements.forEach(req => {
                const element = document.getElementById(req.id);
                const icon = element.querySelector('i');

                if (req.test) {
                    element.classList.add('met');
                    icon.className = 'fas fa-check';
                    score++;
                } else {
                    element.classList.remove('met');
                    icon.className = 'fas fa-times';
                }
            });

            // Set strength level
            if (password.length === 0) {
                feedback = '';
                strengthFill.className = 'strength-fill';
            } else if (score < 3) {
                feedback = 'Weak password';
                strengthFill.className = 'strength-fill strength-weak';
            } else if (score < 4) {
                feedback = 'Fair password';
                strengthFill.className = 'strength-fill strength-fair';
            } else if (score < 5) {
                feedback = 'Good password';
                strengthFill.className = 'strength-fill strength-good';
            } else {
                feedback = 'Strong password';
                strengthFill.className = 'strength-fill strength-strong';
            }

            strengthText.textContent = feedback;
        }

        function validateConfirmPassword() {
            const newPassword = newPasswordInput.value;
            const confirmPassword = confirmPasswordInput.value;
            const errorSpan = confirmPasswordInput.parentNode.nextElementSibling;

            if (confirmPassword && newPassword !== confirmPassword) {
                confirmPasswordInput.classList.add('error');
                confirmPasswordInput.classList.remove('valid');
                if (errorSpan) {
                    errorSpan.textContent = 'Passwords do not match';
                    errorSpan.style.display = 'block';
                }
            } else if (confirmPassword) {
                confirmPasswordInput.classList.remove('error');
                confirmPasswordInput.classList.add('valid');
                if (errorSpan) {
                    errorSpan.textContent = '';
                    errorSpan.style.display = 'none';
                }
            }
        }

        function validateForm() {
            let isValid = true;

            // Clear previous errors
            const errorElements = form.querySelectorAll('.field-validation-error');
            errorElements.forEach(el => {
                el.textContent = '';
                el.style.display = 'none';
            });

            // Validate current password
            if (!currentPasswordInput.value.trim()) {
                showFieldError(currentPasswordInput, 'Current password is required');
                isValid = false;
            }

            // Validate new password
            if (!newPasswordInput.value.trim()) {
                showFieldError(newPasswordInput, 'New password is required');
                isValid = false;
            } else if (newPasswordInput.value.length < 8) {
                showFieldError(newPasswordInput, 'New password must be at least 8 characters long');
                isValid = false;
            }

            // Validate confirm password
            if (!confirmPasswordInput.value.trim()) {
                showFieldError(confirmPasswordInput, 'Please confirm your new password');
                isValid = false;
            } else if (newPasswordInput.value !== confirmPasswordInput.value) {
                showFieldError(confirmPasswordInput, 'Passwords do not match');
                isValid = false;
            }

            // Check if new password is different from current
            if (currentPasswordInput.value && newPasswordInput.value &&
                currentPasswordInput.value === newPasswordInput.value) {
                showFieldError(newPasswordInput, 'New password must be different from current password');
                isValid = false;
            }

            return isValid;
        }

        function showFieldError(field, message) {
            field.classList.add('error');
            const errorSpan = field.parentNode.nextElementSibling;
            if (errorSpan && errorSpan.classList.contains('field-validation-error')) {
                errorSpan.textContent = message;
                errorSpan.style.display = 'block';
            }
        }

        // Clear error styling on input
        [currentPasswordInput, newPasswordInput, confirmPasswordInput].forEach(input => {
            input.addEventListener('input', () => {
                input.classList.remove('error');
            });
        });
    });

    function togglePassword(inputId, button) {
        const input = document.getElementById(inputId);
        const icon = button.querySelector('i');

        if (input.type === 'password') {
            input.type = 'text';
            icon.className = 'fas fa-eye-slash';
        } else {
            input.type = 'password';
            icon.className = 'fas fa-eye';
        }
    }
</script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}




<style>
    .change-password-container {
        background: var(--bg-primary);
        min-height: calc(100vh - 76px);
        padding: 2rem 0;
    }

    .change-password-header {
        background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);
        border: 1px solid var(--border-primary);
        border-radius: 8px;
        padding: 2rem;
        margin-bottom: 2rem;
        text-align: center;
    }

        .change-password-header h1 {
            color: var(--text-primary);
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .change-password-header p {
            color: var(--text-secondary);
            font-size: 1.1rem;
        }

    .form-card {
        background: var(--bg-tertiary);
        border: 1px solid var(--border-primary);
        border-radius: 12px;
        padding: 2.5rem;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
        max-width: 600px;
        margin: 0 auto;
    }

    .security-tips {
        background: var(--bg-primary);
        border: 1px solid var(--border-primary);
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 2rem;
    }

        .security-tips h3 {
            color: var(--text-primary);
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .security-tips ul {
            color: var(--text-secondary);
            margin: 0;
            padding-left: 1.5rem;
            line-height: 1.6;
        }

        .security-tips li {
            margin-bottom: 0.5rem;
        }

    .form-group {
        margin-bottom: 2rem;
    }

    .form-label {
        display: block;
        color: var(--text-primary);
        font-weight: 600;
        margin-bottom: 0.75rem;
        font-size: 1rem;
    }

        .form-label.required::after {
            content: " *";
            color: #dc3545;
        }

    .password-input-container {
        position: relative;
    }

    .form-control {
        width: 100%;
        padding: 1rem 3rem 1rem 1rem;
        background: var(--bg-primary);
        border: 2px solid var(--border-primary);
        border-radius: 6px;
        color: var(--text-primary);
        font-size: 1rem;
        transition: all 0.3s ease;
        font-family: inherit;
    }

        .form-control:focus {
            color: var(--text-primary);
            outline: none;
            border-color: var(--accent-primary);
            box-shadow: 0 0 0 3px rgba(88, 166, 255, 0.1);
            background: var(--bg-secondary);
        }

        .form-control.error {
            border-color: #dc3545;
            box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);
        }

        .form-control.valid {
            border-color: #28a745;
            box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.1);
        }

    .password-toggle {
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: var(--text-secondary);
        cursor: pointer;
        font-size: 1.1rem;
        padding: 0.25rem;
        transition: color 0.2s ease;
    }

        .password-toggle:hover {
            color: var(--accent-primary);
        }

    .field-validation-error {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.5rem;
        display: block;
    }

    .field-validation-valid {
        color: #28a745;
        font-size: 0.875rem;
        margin-top: 0.5rem;
        display: block;
    }

    .validation-summary-errors {
        background: rgba(220, 53, 69, 0.1);
        border: 1px solid rgba(220, 53, 69, 0.3);
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 2rem;
    }

        .validation-summary-errors ul {
            margin: 0;
            padding-left: 1.5rem;
            color: #dc3545;
        }

    .password-strength {
        margin-top: 0.75rem;
    }

    .strength-text {
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
        font-weight: 500;
    }

    .strength-bar {
        height: 6px;
        background: var(--border-primary);
        border-radius: 3px;
        overflow: hidden;
    }

    .strength-fill {
        height: 100%;
        transition: all 0.3s ease;
        border-radius: 3px;
    }

    .strength-weak {
        background: #dc3545;
        width: 25%;
    }

    .strength-fair {
        background: #ffc107;
        width: 50%;
    }

    .strength-good {
        background: #fd7e14;
        width: 75%;
    }

    .strength-strong {
        background: #28a745;
        width: 100%;
    }

    .password-requirements {
        background: var(--bg-primary);
        border: 1px solid var(--border-primary);
        border-radius: 6px;
        padding: 1rem;
        margin-top: 0.75rem;
    }

    .requirement {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
        color: var(--text-secondary);
    }

        .requirement:last-child {
            margin-bottom: 0;
        }

        .requirement.met {
            color: #28a745;
        }

        .requirement i {
            width: 16px;
            font-size: 0.8rem;
        }

    .form-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        margin-top: 3rem;
        padding-top: 2rem;
        border-top: 1px solid var(--border-primary);
    }

    .btn {
        padding: 1rem 2rem;
        border: none;
        border-radius: 6px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--accent-secondary), var(--accent-primary));
        color: white;
    }

        .btn-primary:hover {
            box-shadow: 0 8px 25px rgba(88, 166, 255, 0.3);
        }

    .btn-secondary {
        background: var(--text-secondary);
        color: white;
    }

        .btn-secondary:hover {
            background: var(--text-primary);
        }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }

    @@media (max-width: 768px) {
        .form-card

    {
        padding: 1.5rem;
        margin: 0 1rem;
    }

    .form-actions {
        flex-direction: column;
    }

    .change-password-header {
        padding: 1.5rem;
    }

        .change-password-header h1 {
            font-size: 2rem;
        }

    }
</style>


